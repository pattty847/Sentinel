---
description:
globs:
alwaysApply: false
---
# GPU Rendering Context

## TECHNICAL CONTEXT
This rule provides specific technical details for the GPU rendering optimization refactor.

## CURRENT RENDERING SYSTEM
- **Framework**: Qt Widgets with QPainter
- **Performance**: Adequate for small datasets, bottlenecks at >10k points
- **Thread Model**: All rendering on GUI thread
- **Limitations**: CPU-bound, limited to 2D painting operations

## TARGET RENDERING SYSTEM  
- **Framework**: Qt Quick with SceneGraph (GPU-accelerated)
- **Performance Target**: 1M+ points @ 144Hz, <3ms render time
- **GPU Pipeline**: Direct OpenGL/Metal/Vulkan through Qt RHI
- **Data Flow**: Lock-free data → VBO → GPU batching

## IMPLEMENTATION PHASES

### Phase 0: Qt Quick Foundation
- **Deliverable**: Basic Qt Quick app with 1k dummy points
- **Files**: `libs/gui/qml/DepthChartView.qml`, `libs/gui/basicpointcloud.h`
- **Validation**: ≥59 FPS @ 4K resolution
- **Rollback**: Revert to QPainter if GPU pipeline fails

### Phase 1: VBO + Triple Buffering
- **Deliverable**: 1M points with <3ms GPU time
- **Key Technologies**: VBO mapping, fence sync, shader optimization
- **Files**: `libs/gui/pointcloudvbo.h`, `libs/gui/shaders/pointcloud.vert`
- **Validation**: GPU profiling with QtQuickProfiler

### Phase 2: Instanced Heatmap Rendering
- **Deliverable**: 200k heatmap quads <2ms GPU time
- **Key Technologies**: Instanced rendering, separate bid/ask buffers
- **Files**: `libs/gui/heatmapinstanced.h`
- **Validation**: GPU memory and bandwidth optimization

### Phase 3: Lock-Free Data Pipeline
- **Deliverable**: 0 dropped frames @ 20k msg/s
- **Key Technologies**: Power-of-2 ring buffer, atomic operations
- **Files**: `libs/core/lockfreequeue.h`, `libs/gui/gpudataadapter.cpp`
- **Validation**: Real-time performance under load

## TECHNICAL SPECIFICATIONS

### Shader Requirements
```glsl
// Vertex shader - minimal processing
#version 440
layout(location = 0) in vec2 position;
layout(location = 1) in vec4 color;
layout(std140, binding = 0) uniform ChartUniforms {
    mat4 qt_Matrix;
    float qt_Opacity;
    float pointSize;
};
```

### VBO Layout
```cpp
struct Point {
    float x, y;           // Position
    float r, g, b, a;     // Color
};

// Triple buffered for fence sync
std::array<std::vector<Point>, 3> m_pointBuffers;
```

### Performance Requirements
- **Frame Time**: <16ms (60 FPS minimum, 144Hz target)
- **GPU Time**: <3ms for 1M points
- **Memory**: Bounded allocation, no leaks
- **Latency**: Sub-millisecond data ingestion

## INTEGRATION POINTS

### Qt Quick Integration
- **QML Registration**: `qmlRegisterType<PointCloudVBO>("Sentinel.Charts", 1, 0, "PointCloud")`
- **Signal/Slot**: Connect to existing `StreamController::tradeReceived`
- **Threading**: Maintain worker/GUI thread separation

### CMake Changes
```cmake
find_package(Qt6 REQUIRED COMPONENTS Quick Qml)
qt6_add_qml_module(sentinel_gui_lib
    URI Sentinel.Charts
    VERSION 1.0
    QML_FILES qml/DepthChartView.qml
)
```

### Build System
- **vcpkg**: No new dependencies required (Qt6 already included)
- **Shaders**: Embedded as Qt resources
- **Cross-platform**: RHI backend auto-selection

## DEBUGGING & PROFILING

### Environment Variables
```bash
export QSG_RENDER_TIMING=1      # Frame timing
export QSG_VISUALIZE=overdraw   # GPU debugging
export SENTINEL_PERF_MODE=1     # Performance monitoring
```

### Performance Gates
- **Phase 0**: ≥59 FPS @ 4K
- **Phase 1**: <3ms GPU time for 1M points  
- **Phase 2**: <2ms GPU time for 200k quads
- **Phase 3**: 0 dropped frames @ 20k msg/s

### Rollback Triggers
- Any performance gate failure
- Cross-platform compatibility issues
- Memory leaks or GPU resource exhaustion
- Integration failures with existing architecture
