---
description: 
globs: libs/gui/**/*
alwaysApply: false
---
# Multi-Mode Chart Architecture

## ARCHITECTURAL PATTERN
Multi-layer GPU rendering system with proper timing frequency management and batching integration.

## CORE PRINCIPLE: RENDERING FREQUENCY ALIGNMENT
**Critical Lesson**: Different visualization modes require different update frequencies:
- **Trade Scatter**: Real-time (60 FPS batching) ✅
- **Order Book Heatmap**: Real-time (60 FPS batching) ✅  
- **High-Freq Candles**: 100ms-1s (6-60 updates per completion) ✅
- **Traditional Candles**: 1min+ (time-based updates only) ⚠️

## MULTI-LAYER RENDERING COMPONENTS

### GPU Rendering Pipeline
```
WebSocket Thread → MarketDataCore → GPUDataAdapter (16ms batching)
   ├─ Trade Queue → tradesReady → GPUChartWidget
   ├─ OrderBook Queue → heatmapReady → HeatmapInstanced  
   └─ Candle Processing → candlesReady → CandlestickBatched
```

### Component Responsibilities
- **GPUChartWidget**: Trade scatter points, VBO triple buffering, master coordinate system
- **HeatmapInstanced**: Order book depth, instanced quad rendering, coordinate follower
- **CandlestickBatched**: OHLC candles, multi-timeframe LOD, progressive building
- **GPUDataAdapter**: Central batching hub, 16ms timer, zero-malloc pipeline

## BATCHING INTEGRATION PATTERNS

### ✅ Proper Integration (GPUChartWidget, HeatmapInstanced)
```cpp
// Connect to batched signals from GPUDataAdapter
connect(gpuDataAdapter, &GPUDataAdapter::tradesReady,
        gpuChart, &GPUChartWidget::onTradesReady);
        
connect(gpuDataAdapter, &GPUDataAdapter::heatmapReady,
        heatmap, &HeatmapInstanced::onHeatmapReady);
```

### ❌ Problematic Pattern (Old CandlestickBatched)
```cpp
// AVOID: Direct individual trade signals bypass batching
connect(streamController, &StreamController::tradeReceived,
        candleChart, &CandlestickBatched::onTradeReceived);
        
// Results in: 100 trades = 100 immediate GPU updates
```

### ✅ Fixed Integration (New CandlestickBatched)
```cpp
// Connect to batched candle signals from GPUDataAdapter
connect(gpuDataAdapter, &GPUDataAdapter::candlesReady,
        candleChart, &CandlestickBatched::onCandlesReady);
```

## COORDINATE SYNCHRONIZATION

### Master-Follower Pattern
```cpp
// GPUChartWidget = Master (pan/zoom controls)
// All other components = Followers (sync coordinates)

connect(gpuChart, &GPUChartWidget::viewChanged,
        heatmap, &HeatmapInstanced::setTimeWindow);
        
connect(gpuChart, &GPUChartWidget::viewChanged,
        candleChart, &CandlestickBatched::onViewChanged);
```

## CHART MODE SWITCHING

### Mode Enumeration
```cpp
enum class ChartMode {
    TRADE_SCATTER,           // Individual trade points
    HIGH_FREQ_CANDLES,       // 100ms-1s candles
    TRADITIONAL_CANDLES,     // 1min+ candles  
    ORDER_BOOK_HEATMAP,      // Dense liquidity view
    HYBRID_MODES             // Multiple layers active
};
```

### Component Visibility Management
```cpp
class ChartModeController {
    void setMode(ChartMode mode) {
        // Enable/disable appropriate GPU components
        // Manage GPU memory allocation per mode
        // Update UI controls and indicators
    }
};
```

## PERFORMANCE REQUIREMENTS

### Timing Frequency Guidelines
- **16ms Batching**: For real-time components (trades, order book)
- **100ms-1s Candles**: Progressive building with ~6-60 updates per candle
- **1min+ Candles**: Time-based updates only (not frequency-based)
- **Mode Switching**: <5ms transition time, no memory leaks

### GPU Memory Management
- **Conditional Rendering**: Only active components consume GPU resources
- **Buffer Pre-allocation**: Avoid runtime allocation during mode switches
- **VRAM Limits**: <100MB per active mode on integrated GPUs

## FILE STRUCTURE

### Core Files
- `libs/gui/gpudataadapter.h/cpp`: Central batching pipeline
- `libs/gui/gpuchartwidget.h/cpp`: Master coordinate system
- `libs/gui/heatmapinstanced.h/cpp`: Order book visualization
- `libs/gui/candlestickbatched.h/cpp`: Multi-timeframe candles

### Mode Switching
- `libs/gui/chartmode.h`: Mode enumeration and constants
- `libs/gui/chartmodecontroller.h/cpp`: Mode switching logic
- `libs/gui/qml/DepthChartView.qml`: UI mode controls

### Integration
- `libs/gui/mainwindow_gpu.cpp`: Component wiring and connections
- `libs/gui/candlelod.h/cpp`: Multi-timeframe candle management

## INTEGRATION CHECKLIST

### New Component Integration
- [ ] Connect to GPUDataAdapter batched signals (not individual signals)
- [ ] Implement coordinate synchronization with GPUChartWidget
- [ ] Add mode-aware visibility and GPU resource management
- [ ] Test timing frequency alignment with rendering target
- [ ] Validate performance under high-frequency data loads

### Debugging Tools
- [ ] Component rendering frequency monitoring
- [ ] GPU memory usage per mode tracking  
- [ ] Batching pipeline flow validation
- [ ] Coordinate synchronization verification
