---
description: 
globs: 
alwaysApply: false
---
# Bug-Fixing Specialist Protocol

## ACTIVATION TRIGGER
This rule activates when encountering:
- Compilation errors (build failures)
- Test failures (assertion failures, crashes)
- Runtime exceptions (segfaults, unhandled exceptions)
- Performance regressions (exceeding established thresholds)
- Integration failures (component interface mismatches)

## PRIMARY MISSION
**Fix the immediate technical blocker and restore forward progress.**

Do NOT add new features, refactor unrelated code, or change the original goal.

## DIAGNOSIS METHODOLOGY

### 1. ERROR ANALYSIS
- **Extract exact error message** (compiler output, stack trace, assertion failure)
- **Identify error location** (file, function, line number)
- **Determine error category** (syntax, logic, integration, performance)

### 2. CONTEXT RECONSTRUCTION  
- **What was the previous agent trying to accomplish?**
- **What files were recently modified?**
- **What was the expected vs actual behavior?**
- **Are there related components that might be affected?**

### 3. ROOT CAUSE IDENTIFICATION
- **Immediate cause** (syntax error, null pointer, missing include)
- **Contributing factors** (architectural mismatch, threading issue, dependency problem)
- **Scope of impact** (local fix vs systemic issue)

## FIXING STRATEGY

### Minimal Fix Principle
1. **Smallest possible change** to restore functionality
2. **Preserve original intent** - don't redesign, just fix
3. **Maintain architectural patterns** - respect Facade pattern, thread safety
4. **Test-first validation** - ensure fix doesn't break other functionality

### Fix Categories

#### Compilation Errors
- Missing includes, forward declarations
- Template instantiation issues
- Linker errors, missing symbols
- CMake configuration problems

#### Runtime Errors  
- Null pointer dereferences
- Memory leaks, buffer overflows
- Thread safety violations
- Exception handling gaps

#### Integration Errors
- Qt signal/slot connection failures
- Component interface mismatches
- Data flow interruptions
- Threading synchronization issues

#### Performance Regressions
- Lock contention introduction
- Memory allocation in hot paths
- O(n) operations replacing O(1)
- GPU pipeline stalls

## VALIDATION REQUIREMENTS

### Immediate Tests
- [ ] Code compiles without errors/warnings
- [ ] All existing tests pass
- [ ] No new memory leaks (valgrind/sanitizer clean)
- [ ] Performance benchmarks still meet requirements

### Integration Tests
- [ ] Qt signal/slot connections work
- [ ] Data flows correctly through pipeline
- [ ] Threading model remains intact
- [ ] GPU rendering (if applicable) functions correctly

## HANDOFF DOCUMENTATION

### Bug Report Summary
```markdown
## BUG FIXED: [Brief Description]

**Original Error**: [Exact error message/symptom]
**Root Cause**: [Technical explanation]
**Solution Applied**: [Specific changes made]
**Files Modified**: [List of changed files]
**Side Effects**: [Any other impacts/considerations]
**Validation**: [Tests run to confirm fix]

### Resume Point for Next Agent
[Clear description of where the next agent should continue the original work]
```

## SENTINEL-SPECIFIC CONSIDERATIONS

### Architecture Preservation
- Maintain 39-line Facade pattern integrity
- Preserve worker/GUI thread separation
- Keep shared_mutex data access patterns
- Maintain Qt signal/slot communication

### Performance Requirements
- Preserve sub-millisecond latency requirements
- Maintain O(1) data cache operations
- Keep lock-free read access patterns
- Preserve GPU pipeline efficiency (when applicable)

### Component Integration
- Respect DataCache ring buffer semantics
- Maintain MarketDataCore WebSocket lifecycle
- Preserve StreamController Qt bridge functionality
- Keep TradeChartWidget rendering performance
