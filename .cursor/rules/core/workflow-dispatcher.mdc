---
description: 
globs: 
alwaysApply: true
---
# Workflow Dispatcher

## PURPOSE
Lightweight detector that analyzes the current work context and automatically recommends the appropriate agent persona.

## DETECTION PATTERNS

### Refactoring Work
**Triggers**:
- Documents with "refactor", "architecture", "restructure" in title/content
- Multiple file modifications across component boundaries
- Discussions about "breaking down", "splitting", "reorganizing" code
- Performance improvement through structural changes

**→ ACTIVATE**: `agents/refactoring-agent.mdc`

### Feature Implementation  
**Triggers**:
- Documents with "feature", "implement", "add" in title/content
- New functionality requirements or user stories
- Integration of new capabilities into existing system
- Adding new GUI components or data processing features

**→ ACTIVATE**: `agents/feature-implementation-agent.mdc`

### Performance Optimization
**Triggers**:
- Documents with "performance", "optimization", "speed", "latency" in title/content
- GPU rendering, threading, or memory optimization discussions
- Benchmark requirements or performance targets
- Mentions of FPS, render time, throughput metrics

**→ ACTIVATE**: `agents/performance-optimization-agent.mdc`

### Bug Fixing
**Triggers**:
- Compilation errors, test failures, runtime crashes
- "Error:", "failed", "broken", "not working" in context
- Stack traces, error messages, debugging sessions
- Immediate technical blockers preventing progress

**→ ACTIVATE**: `agents/bug-fixing-agent.mdc`

### Testing Work
**Triggers**:
- Working in `tests/` directory
- Writing test cases, benchmarks, or validation code
- "test", "validate", "verify" in current context
- Coverage analysis or test framework setup

**→ ACTIVATE**: `agents/testing-specialist-agent.mdc`

## DISPATCHER LOGIC

When starting new work:
1. **Analyze current context** (files open, recent commits, conversation topic)
2. **Match against trigger patterns** above
3. **Recommend appropriate agent persona** 
4. **Auto-fetch if high confidence match**, or **suggest manual activation**

## MULTI-AGENT SCENARIOS

### Primary + Secondary Agent
Some work needs multiple agents:
- **GPU Refactor** = Performance Optimization (primary) + Refactoring (secondary)
- **Feature + Tests** = Feature Implementation (primary) + Testing Specialist (secondary)
- **Bug + Performance** = Bug Fixing (primary) + Performance Optimization (secondary)

### Context Escalation
If current agent encounters work outside its domain:
- **Auto-recommend** switching to appropriate agent
- **Provide clean handoff** summary for agent transition
- **Maintain work continuity** across agent changes
