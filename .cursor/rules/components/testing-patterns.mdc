---
description: 
globs: tests/**/*
alwaysApply: false
---
# Testing Patterns and Validation

## PROVEN SUCCESS METRICS
Current test suite achievements:
- **100% test success rate** (12/12 comprehensive tests)
- **Performance validation** (0.0003ms latency verified)
- **Production validation** (117 live trades processed)
- **Comprehensive coverage** of all major components

## TEST CATEGORIES

### Unit Tests
- **Component isolation** testing
- **Interface validation** 
- **Error condition handling**
- **Performance benchmarking**

### Integration Tests
- **Full data flow** validation (WebSocket â†’ UI)
- **Thread safety** verification
- **Qt signal/slot** chain testing
- **End-to-end** functionality

### Performance Tests
```cpp
// Latency validation pattern
void testLatencyRequirements() {
    auto start = std::chrono::high_resolution_clock::now();
    // Execute operation
    auto end = std::chrono::high_resolution_clock::now();
    
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
    EXPECT_LT(duration.count(), 1000); // Sub-millisecond requirement
}
```

## TESTING FRAMEWORK INTEGRATION

### CMake Test Configuration
```cmake
# Standard test setup
enable_testing()
find_package(GTest REQUIRED)

add_executable(test_comprehensive test_comprehensive.cpp)
target_link_libraries(test_comprehensive 
    GTest::GTest 
    GTest::Main
    sentinel_core
    sentinel_gui
)

add_test(NAME ComprehensiveTests COMMAND test_comprehensive)
```

### Test Structure Pattern
```cpp
class ComponentTest : public ::testing::Test {
protected:
    void SetUp() override {
        // Initialize test fixtures
    }
    
    void TearDown() override {
        // Clean up resources
    }
    
    // Test fixtures and utilities
};

TEST_F(ComponentTest, PerformanceRequirement) {
    // Benchmark critical operations
}

TEST_F(ComponentTest, ThreadSafety) {
    // Concurrent access validation
}
```

## VALIDATION REQUIREMENTS

### Compilation Validation
- **Zero warnings** with strict compiler flags
- **All targets build** successfully
- **CMake configuration** validation
- **Dependency resolution** verification

### Functional Validation
- **API contract** compliance
- **Error handling** robustness
- **Resource management** (no leaks)
- **Thread safety** under concurrent access

### Performance Validation
- **Sub-millisecond latency** maintained
- **Memory usage** within bounds
- **Throughput** requirements met
- **Scalability** under load

## TEST AUTOMATION PATTERNS

### Continuous Integration Requirements
```bash
# Standard CI pipeline validation
mkdir build && cd build
cmake ..
make -j$(nproc)
ctest --output-on-failure
```

### Performance Benchmarking
- **Baseline measurements** before changes
- **Regression detection** after modifications
- **Performance profiling** for bottlenecks
- **Memory leak detection** with Valgrind

### Mock and Stub Patterns
```cpp
// Mock WebSocket for isolated testing
class MockWebSocket {
public:
    MOCK_METHOD(void, send, (const std::string& data));
    MOCK_METHOD(void, connect, (const std::string& url));
    // Mock interface for testing
};
```

## INTEGRATION WITH WORKFLOW

### Phase Validation
When strategic plans include testing phases:
- **Test-driven development** approach
- **Incremental test additions** with each phase
- **Regression testing** after modifications
- **Performance benchmarking** validation

### Documentation Updates
- **Test documentation** for new features
- **Coverage reports** and metrics
- **Performance baselines** recording
- **Integration test scenarios**

## COMMON TEST SCENARIOS

### WebSocket Testing
- **Connection establishment** and teardown
- **Message parsing** and validation
- **Error recovery** mechanisms
- **Reconnection logic** validation

### GUI Testing
- **Qt signal/slot** chain verification
- **UI responsiveness** under load
- **Thread-safe** data reception
- **Widget state** management

### Performance Testing
- **Latency measurements** for critical paths
- **Memory usage** profiling
- **Concurrent access** benchmarking
- **Resource cleanup** validation
