---
description: 
globs: 
alwaysApply: true
---
# Sentinel Codebase Architecture

## PROVEN ARCHITECTURE (83% CODE REDUCTION SUCCESS)
Current architecture achieved through refactoring workflow:
- **39-line CoinbaseStreamClient** (Facade pattern)
- **0.0003ms average latency** performance
- **100% test success rate** (12/12 comprehensive tests)
- **117 live trades processed** in production

## COMPONENT STRUCTURE

### Core Components (`libs/core/`)
- **CoinbaseStreamClient**: 39-line facade with clean delegation
- **Authenticator**: JWT ES256 signing, token lifecycle management
- **DataCache**: Ring buffer with shared_mutex for O(1) concurrent reads
- **MarketDataCore**: Boost.Beast WebSocket with RAII lifecycle management

### GUI Components (`libs/gui/`)
- **StreamController**: Bridge between core and GUI with Qt signal/slot pattern
- **TradeChartWidget**: Qt-based visualization with real-time updates
- **MainWindow**: Primary Qt application window

### Applications (`apps/`)
- **sentinel_gui**: Main GUI application (CMake target)
- **stream_cli**: Command-line streaming client

## TECHNOLOGY STACK
- **Language**: C++17 with modern features
- **GUI Framework**: Qt6 (signals/slots, widgets)
- **Networking**: Boost.Beast WebSocket
- **Authentication**: JWT with ES256 signing
- **Build System**: CMake with vcpkg package manager
- **Threading**: Worker thread (networking) + GUI thread (UI)

## ARCHITECTURAL PATTERNS

### Facade Pattern
```cpp
// CoinbaseStreamClient - 39 lines total
class CoinbaseStreamClient {
    void start() { core_->start(); }
    void stop() { core_->stop(); }
    // Clean delegation to MarketDataCore
};
```

### Thread Safety Model
- **Worker Thread**: WebSocket networking, data processing
- **GUI Thread**: Qt UI updates, user interactions
- **Synchronization**: shared_mutex for concurrent read access
- **Data Flow**: WebSocket → DataCache → Qt Signals → UI

### Performance Optimization
- **Ring Buffer**: O(1) data insertion and access
- **Lock-Free Reads**: Multiple concurrent readers
- **Minimal Copying**: Move semantics throughout
- **Sub-millisecond Requirements**: All operations optimized

## INTEGRATION PATTERNS

### Qt Integration
```cpp
// Signal/slot pattern for thread-safe UI updates
connect(streamController, &StreamController::tradeReceived,
        chartWidget, &TradeChartWidget::addTrade);
```

### WebSocket Data Flow
```
WebSocket Message → MarketDataCore → DataCache → Qt Signal → UI Component
```

### CMake Build Structure
- Root CMakeLists.txt coordinates all targets
- Component-specific CMakeLists.txt in each lib/
- vcpkg integration for dependencies

## PERFORMANCE REQUIREMENTS
- **Latency**: Sub-millisecond data processing
- **Throughput**: Handle real-time market data streams
- **Memory**: Efficient ring buffer with bounded memory usage
- **Concurrency**: Lock-free reads, minimal contention

## TESTING FRAMEWORK
- Comprehensive test suite with 12+ test cases
- Performance benchmarking integrated
- Integration tests for full data flow
- Thread safety validation
